// Dependencies
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _path = require('./path');

var _path2 = _interopRequireDefault(_path);

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

// Public

var Svg = (function () {
  function Svg(image) {
    _classCallCheck(this, Svg);

    this.cheerio = _cheerio2['default'].load('<svg/>', { xmlMode: true });

    var svg = undefined;
    svg = this.cheerio('svg');
    svg.attr({
      'version': '1.1',
      'xmlns': 'http://www.w3.org/2000/svg',
      'xmlns:xlink': 'http://www.w3.org/1999/xlink',

      'shape-rendering': 'crispEdges'
    });

    if (image) {
      svg.attr({
        'width': image.width,
        'height': image.height,
        'viewBox': '0 0 ' + image.width + ' ' + image.height
      });

      svg.append(this.render(image));
    }
  }

  _createClass(Svg, [{
    key: 'render',
    value: function render(image) {
      return this.renderG(this.parse(image));
    }
  }, {
    key: 'parse',
    value: function parse(image) {
      var colors = [];
      var points = {};

      var i = 0;
      var channel = 0;
      while (image.data[channel] != null) {
        var x = i % image.width;
        var y = Math.floor(i / image.width);
        var r = image.data[channel++];
        var g = image.data[channel++];
        var b = image.data[channel++];
        var a = image.data[channel++];
        var rgba = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

        var j = colors.indexOf(rgba);
        if (j === -1) {
          j = colors.length;
          colors.push(rgba);
        }

        points[x + ',' + y] = j;

        i++;
      }

      return { points: points, colors: colors };
    }
  }, {
    key: 'renderG',
    value: function renderG(_ref) {
      var points = _ref.points;
      var colors = _ref.colors;

      var g = (0, _cheerio2['default'])('<g/>');

      var paths = {};
      for (var point in points) {
        var _point$split = point.split(',');

        var _point$split2 = _slicedToArray(_point$split, 2);

        var x = _point$split2[0];
        var y = _point$split2[1];

        var color = colors[points[point]];

        var path = paths[color];
        if (path == null) {
          path = new _path2['default'](color);
          paths[color] = path;
        }

        path.draw(x, y);
      }

      for (var color in paths) {
        var path = (0, _cheerio2['default'])('<path/>');
        path.attr('fill', color);
        path.attr('d', paths[color].toElement());

        g.append(path);
      }

      return g;
    }
  }, {
    key: 'html',
    value: function html() {
      return this.cheerio.html();
    }
  }]);

  return Svg;
})();

exports['default'] = Svg;
module.exports = exports['default'];